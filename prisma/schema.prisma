// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Tier {
  FREE
  PREMIUM
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  name          String?
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  tier          Tier       @default(FREE)

  presents Present[] @relation("OwnedPresents")
  picks    Present[] @relation("PickedPresents")

  lists List[]

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

enum ItemStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum ItemVisibility {
  PUBLIC
  PRIVATE
}

enum PickedStatus {
  UNPICKED
  PICKED
  BOUGHT
}

model Present {
  id             String   @id @default(cuid())
  name           String
  description    String?
  externalLink   String?
  status         ItemStatus     @default(DRAFT)
  visibility     ItemVisibility @default(PRIVATE)
  pickedStatus   PickedStatus   @default(UNPICKED)
  pickedAt       DateTime?
  pickedByUserId String?
  pickedBy       User?    @relation("PickedPresents", fields: [pickedByUserId], references: [id])
  ownerId        String
  owner          User     @relation("OwnedPresents", fields: [ownerId], references: [id])
  listId         String?
  list           List?    @relation(fields: [listId], references: [id])
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([ownerId])
  @@index([listId])
  @@index([pickedByUserId])
}

model List {
  id         String         @id @default(uuid())
  name       String
  status     ItemStatus     @default(DRAFT)
  visibility ItemVisibility @default(PUBLIC)
  eventDate  DateTime

  ownerId String
  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  presents  Present[]
}
